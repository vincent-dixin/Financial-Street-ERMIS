<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<!-- 定义受环境影响易变的变量 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath*:/kpi_param.properties</value>
				<!-- 标准配置 -->
				<value>classpath*:/application.properties</value>
				<!-- 本地开发环境配置 -->
				<value>classpath*:/application.local.properties</value>
				<!-- 服务器生产环境配置 -->
				<value>file:/var/fhd/application.server.properties</value>
			</list>
		</property>
	</bean>

<!-- 	 <jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/fhd" />  -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>

    <bean id="dataSourceTwo" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName">
            <value>com.mysql.jdbc.Driver</value>
        </property>
        <property name="url">
            <value>jdbc:mysql://192.168.0.3/ermis_develop_4_5?useUnicode=true&amp;characterEncoding=UTF8</value>
        </property>
        <property name="username">
            <value>root</value>
        </property>
        <property name="password">
            <value>fhd03admin</value>
        </property>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref local="dataSourceTwo" />
        </property>
    </bean>
    <!-- 	 <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">  -->

<!--         <property name="driverClass" value="${jdbc.driver}" />  -->
<!--         <property name="jdbcUrl" value="${jdbc.url}" />  -->
<!--         <property name="user" value="${jdbc.username}" />  -->
<!--         <property name="password" value="${jdbc.password}" />  -->
    	<!--连接池中保留的最小连接数。--> 
<!--         <property name="minPoolSize" value="5" />  -->
	    <!--连接池中保留的最大连接数。Default: 15 --> 
<!--         <property name="maxPoolSize" value="30" />  -->
   		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 --> 
<!--         <property name="initialPoolSize" value="10" />  -->
    	<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 --> 
<!--         <property name="maxIdleTime" value="60" />  -->
    	<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 --> 
<!--         <property name="acquireIncrement" value="5" />  -->
    	<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 
                              属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0--> 
<!--         <property name="maxStatements" value="100" />  -->
    	<!--每60秒检查所有连接池中的空闲连接。Default: 0 --> 
<!--         <property name="idleConnectionTestPeriod" value="60" />  -->
    	<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 --> 
<!--         <property name="acquireRetryAttempts" value="30" />  -->
    	<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 
         	保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
       		 获取连接失败后该数据源将申明已断开并永久关闭。Default: false--> 
<!--         <property name="breakAfterAcquireFailure" value="true" />  -->
    	<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 
	                    时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
                              等方法来提升连接测试的性能。Default: false --> 
<!--         <property name="testConnectionOnCheckout" value="false" />  -->
<!--     </bean>  -->
    
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"
		p:dataSource-ref="dataSource">
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<property name="mappingLocations">
			<list>
				<value>classpath*:jbpm.repository.hbm.xml</value>
				<value>classpath*:jbpm.execution.hbm.xml</value>
				<value>classpath*:jbpm.history.hbm.xml</value>
				<value>classpath*:jbpm.task.hbm.xml</value>
				<value>classpath*:jbpm.identity.hbm.xml</value>
			</list>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.fhd.fdc.entity</value>
				<!-- 工作流 -->
				<value>com.fhd.bpm.entity</value>
				<!-- 系统管理 -->
				<value>com.fhd.sys.entity</value>
				<!-- 指标 -->
				<value>com.fhd.kpi.entity</value>
				<!-- 风险-->
				<value>com.fhd.risk.entity</value>
				<!-- 公用 -->
				<value>com.fhd.comm.entity</value>
				<!-- 内控 -->
				<value>com.fhd.icm.entity</value>
				<!-- 工作计划 -->
				<value>com.fhd.wp.entity</value>
				<!-- 测试MVC -->
				<value>com.fhd.test.entity</value>
				
				<value>com.fhd.process.entity</value>
				<!-- 评估计划 -->
				<value>com.fhd.assess.entity</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
<!-- 				<prop key="hibernate.default_schema">${jdbc.username}</prop> -->
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
<!-- 				<prop key="hibernate.cache.provider_configuration_file_resource_path">ehcache.xml</prop> -->
				<prop key="hibernate.cache.use_structured_entries">true</prop>
				<prop key="connection.provider_class">org.hibernate.connection.C3P0ConnectionProvider</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.jdbc.fetch_size">100</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
			</props>
		</property>
		<property name="eventListeners">
			<map>
				<entry key="merge">
					<list>
						<bean class="com.fhd.fdc.commons.orm.hibernate.AuditListener" />
						<bean class="org.hibernate.event.def.DefaultMergeEventListener" />
					</list>
				</entry>
			</map>
		</property>
	</bean>
	

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource"><ref bean="dataSource"/></property>
	</bean>

	<tx:annotation-driven proxy-target-class="true"
		transaction-manager="transactionManager" />

	<context:annotation-config />


	<context:component-scan base-package="com.fhd.fdc.dao" />
	<!-- 工作流  -->
	<context:component-scan base-package="com.fhd.bpm.dao" />
	<!-- 系统管理 -->
	<context:component-scan base-package="com.fhd.sys.dao" />
	<!-- 风险 -->
	<context:component-scan base-package="com.fhd.risk.dao" />
	<!-- 指标 -->
	<context:component-scan base-package="com.fhd.kpi.dao" />
	<!-- 公用 -->
	<context:component-scan base-package="com.fhd.comm.dao" />
	<!-- 内控-->
	<context:component-scan base-package="com.fhd.icm.dao" />
	<!-- 工作计划-->
	<context:component-scan base-package="com.fhd.wp.dao" />
	<!-- 风险-->
	<context:component-scan base-package="com.fhd.risk.dao" />
	<!-- 测试MVC -->
	<context:component-scan base-package="com.fhd.test.dao" />
	<!-- 评估计划 -->
	<context:component-scan base-package="com.fhd.assess.dao" />
	
	<context:component-scan base-package="com.fhd.process.dao" />
	
	<context:component-scan base-package="com.fhd.bpm.jbpm" />
	<context:component-scan base-package="com.fhd.fdc.business" />
	<!-- 工作流 -->
	<context:component-scan base-package="com.fhd.bpm.business" />
	<!-- 系统管理 -->
	<context:component-scan base-package="com.fhd.sys.business" />
	<!-- 风险控制 -->
	<!-- 指标 -->
	<context:component-scan base-package="com.fhd.kpi.business" />
	<!-- 风险-->
	<context:component-scan base-package="com.fhd.risk.business" />
	<!-- 公用 -->
	<context:component-scan base-package="com.fhd.comm.business" />
	<!-- 内控 -->
	<context:component-scan base-package="com.fhd.icm.business" />
	<!-- 工作计划 -->
	<context:component-scan base-package="com.fhd.wp.business" />
	
	<context:component-scan base-package="com.fhd.process.business" />
	
	<!-- 测试MVC -->
	<context:component-scan base-package="com.fhd.test.business" />
	
	<context:component-scan base-package="com.fhd.jrj.business" />
	<!-- 评估计划 -->
	<context:component-scan base-package="com.fhd.assess.business" />
	
	<!-- 以静态变量保存ApplicationContext -->
	<bean class="com.fhd.core.utils.SpringContextHolder" lazy-init="false" />
</beans>