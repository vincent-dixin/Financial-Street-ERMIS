/*
 * File: app/view/CategoryTree.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('FHD.view.kpi.scorecard.ScorecardTree', {
    extend: 'FHD.ux.TreePanel',
    alias: 'widget.scorecardtree',
	url : __ctxPath + "/kpi/category/categorytreeloader.f",
    
	root: {
        "id": "category_root",
        "text": FHD.locale.get('fhd.kpi.categoryroot'),
        "dbid": "category_root",
        "leaf": false,
        "code": "category",
        "type": "kpi_category",
        "expanded": true,
        'iconCls':'icon-ibm-icon-scorecards'
    },
	autoScroll:true,
    animate: false,
    rootVisible: true,
    collapsible: false,
    border: false,
    multiSelect: true,
    rowLines: false,
    singleExpand: false,
    checked: false,
    
    /**
     * 添加下级函数
     */
    sublevelHandler: function (id, name) {
        var me = this;
        var scorecardtab = Ext.getCmp('scorecardtab');
        var paramObj = {};
        paramObj.categoryparentid = id;
        paramObj.categoryid = 'undefined';
        paramObj.categoryparentname = name;
        paramObj.editflag = false;
        
        Ext.getCmp('metriccentercardpanel').setActiveItem(Ext.getCmp('scorecardmainpanel'));
        
        me.disablePanel(false);
        
        //设置参数
        scorecardtab.initParam(paramObj);
        
        //清除数据
        scorecardtab.basicinfoCardpanel.clearDate();
        
        //激活基本信息页签
        scorecardtab.setActiveTab(2);
        
        //设置基本信息为激活状态
        scorecardtab.basicinfoCardpanel.setFirstItemFoucs();
        //重新加载数据
        scorecardtab.basicinfoCardpanel.reLoadData();
        
    },
    /**
	 * 添加同级函数
	 */	    
    sameLevelHandler: function (node) {
        var me = this;
        var scorecardtab = Ext.getCmp('scorecardtab');
        var paramObj = {};
       
        if (node.parentNode.data.id == "category_root") {
            paramObj.categoryparentid = "";
            paramObj.categoryid = 'undefined';
            paramObj.categoryparentname = FHD.locale.get('fhd.kpi.categoryroot');
            paramObj.editflag = false;
        } else {
            FHD.ajax({
            	async:false,
                params: {
                    "id": node.data.id
                },
                url: __ctxPath + '/kpi/category/findparentbyid.f',
                callback: function (ret) {
                    paramObj.categoryparentid = ret.parentid;
                    paramObj.categoryid = 'undefined';
                    paramObj.categoryparentname = ret.parentname;
                    paramObj.editflag = false;
                }
            });
        }
        Ext.getCmp('metriccentercardpanel').setActiveItem(Ext.getCmp('scorecardmainpanel'));
        
        me.disablePanel(false);
        
        //设置参数
        scorecardtab.initParam(paramObj);
        //清除数据
        scorecardtab.basicinfoCardpanel.clearDate();
        //激活基本信息页签
        scorecardtab.setActiveTab(2);
        //设置基本信息为激活状态
        scorecardtab.basicinfoCardpanel.setFirstItemFoucs();
        //重新加载数据
        scorecardtab.basicinfoCardpanel.reLoadData();
        
        
    },
    /**
     * 右键菜单
     */
    contextItemMenuFun: function (view, rec, node, index, e) {
        var me = this;
        var id = rec.data.id;
        if("allkpi"==id){
        	return;
        }
        var name = rec.data.text;
        var menu = Ext.create('Ext.menu.Menu', {
            margin: '0 0 10 0',
            items: []
        });
        //添加下级菜单
        var subLevel = {
	            iconCls: 'icon-add',
	            text: FHD.locale.get('fhd.strategymap.strategymapmgr.subLevel'),
	            handler: function () {
	            	me.currentNode = rec;
	            	if(!me.currentNode.isExpanded()&&!me.currentNode.isLeaf()){
		            	me.currentNode.expand();
	            	}
	                me.sublevelHandler(id, name);//添加下级菜单
	            }
	        };
	    menu.add(subLevel);
	    if (index != 0) {
            var sameLevel = {
                iconCls: 'icon-add',
                text: FHD.locale.get('fhd.strategymap.strategymapmgr.sameLevel'),
                handler: function () {
                    me.currentNode = rec.parentNode;
                    me.currentNode.expand();
                    me.sameLevelHandler(rec);//添加同级菜单
                    
                }
            };
            menu.add(sameLevel);
        }
	    menu.add('-');
	    //删除菜单
	    if (index != 0) {
            var delmenu = {
                iconCls: 'icon-delete-icon',
                text: FHD.locale.get('fhd.strategymap.strategymapmgr.delete'),
                handler: function () {
                	me.currentNode = rec.parentNode;
                    me.deleteHandler(id,rec);//删除菜单
                }
            }
            menu.add(delmenu);
            menu.add('-');
        }
	    //刷新菜单
	    var refresh = {
	            iconCls: 'icon-arrow-refresh',
	            text: FHD.locale.get('fhd.strategymap.strategymapmgr.refresh'),
	            handler: function () {
	                me.refreshTree();//刷新菜单
	            }
	     }
	    menu.add(refresh);
	    
	    
	    
	    return menu;
        
    },
	
    /**
     * 刷新函数
     */
    refreshTree: function () {
        var me = this;
        me.getStore().load();
    },
    disablePanel:function(status){
    	Ext.getCmp('scorecardtab').scorecardkpigrid.setDisabled(status);
    	Ext.getCmp('scorecardtab').chartanalysis.setDisabled(status);
    	Ext.getCmp('scorecardtab').basicinfoCardpanel.setDisabled(status);
    },
    deleteNodeAfterSelectNode:function(node){
    	var me = this;
    	var parentnode = node.parentNode;
     	me.currentNode.removeChild(node);
     	if(!me.currentNode.hasChildNodes()&&null!=me.currentNode.parentNode){
     		var oldnode = me.currentNode;
     		var newnode = me.currentNode;
     		newnode.data.leaf = true;
     		me.currentNode.parentNode.replaceChild(newnode,oldnode);
     	}
     	me.getSelectionModel().select(parentnode);
     	Ext.getCmp('scorecardmainpanel').reLoadData(parentnode);
     	if(!me.getRootNode().hasChildNodes()){
     		me.disablePanel(true);
        }
    },
    /**
     * 删除函数
     */
    deleteHandler: function (id,node) {
        var me = this;
        Ext.MessageBox.show({
            title: FHD.locale.get('fhd.common.delete'),
            width: 260,
            msg: FHD.locale.get('fhd.common.makeSureDelete'),
            buttons: Ext.MessageBox.YESNO,
            icon: Ext.MessageBox.QUESTION,
            fn: function (btn) {
                if (btn == 'yes') {
                    FHD.ajax({
                        params: {
                            "id": id
                        },
                        url: __ctxPath + '/kpi/category/removecategory.f',
                        callback: function (ret) {
                            if (ret && ret.result) {
                                if (ret.result == "cascade") {
//                                    Ext.ux.Toast.msg(FHD.locale.get('fhd.common.prompt'), FHD.locale.get("fhd.kpi.kpi.prompt.categorycasdes"));
                                    Ext.ux.Toast.msg(FHD.locale.get('fhd.common.prompt'), '存在下级,不能删除!');
                                } else if (ret.result == "success") {
                                    me.deleteNodeAfterSelectNode(node);
                                }

                            }

                        }
                    });
                }
            }
        });
    },
    /**
     *默认选择首个节点 
     */
    foucusFirstNode:function(){
    	var me = this;
    	var rootNode = me.getRootNode();
        if (rootNode.childNodes.length > 0) {
        	var firstNode = rootNode.firstChild;
        	if(null!=firstNode){
        		me.getSelectionModel().select(firstNode);//默认选择首节点
                Ext.getCmp('scorecardmainpanel').reLoadData(firstNode);//加载首节点数据
        	}
        }
    },
    /**
     * 当前节点点击函数,如果没有选中节点,默认选中首节点
     */
    currentNodeClick:function(){
    	var me = this;
    	var selectedNode;
    	var scorecardmainpanel = Ext.getCmp('scorecardmainpanel');
    	var nodeItems = me.getSelectionModel().selected.items;
        if (nodeItems.length > 0) {
            selectedNode = nodeItems[0];
            me.currentNode = selectedNode;
        }
        if(selectedNode==null){
        	var firstNode = me.getRootNode().firstChild;
        	if(null!=firstNode){
        		me.getSelectionModel().select(firstNode);
        		me.currentNode = firstNode;
        		me.selectAllKpiOrSC(firstNode);
        	}else{
        		me.disablePanel(true);
        	}
        }else{
        	me.currentNode = selectedNode;
        	me.selectAllKpiOrSC(selectedNode);
        }
    },
	
    initComponent: function() {
        var me = this;
        me.navNode = {};
        Ext.applyIf(me, {
            
            listeners: {
                itemclick: me.onTreepanelItemClick,
                load: function (store, records) { //默认选择首节点
                }
            },
            viewConfig: {
                listeners: {
                    itemcontextmenu: function (view, rec, node, index, e) {
                        e.stopEvent();
                        var menu = me.contextItemMenuFun(view, rec, node, index, e);
                        if (menu) {
                            menu.showAt(e.getPoint());
                        }
                        return false;
                    }
                }
            }

        });

        me.callParent(arguments);
    },
    findNode:function(root,nodeid){
    	var me = this;
    	var childnodes = root.childNodes;//获取根节点的子节点
        for(var i=0; i < childnodes.length; i++){
           var node = childnodes[i];
           if(node.data.id == nodeid)
           {
        	   me.navNode = node;
           }
           if(node.hasChildNodes()){
             me.findNode(node,nodeid);//递归调用
           }
        }
        return me.navNode;
    },
    selectedNodeClick:function(selectedNode){
    	var me = this;
    	var metrictreecardpanel = Ext.getCmp('metrictreecardpanel');
     	var scorecardmainpanel = Ext.getCmp('scorecardmainpanel');
     	var activeItem = metrictreecardpanel.getActiveItem();
     	if(activeItem.id=='scorecardtree'){//当点击添加或编辑指标时,在点击记分卡节点时,需要设置记分卡scorecardmainpanel主面板在右侧
     		Ext.getCmp('metriccentercardpanel').setActiveItem(scorecardmainpanel);
     	}
        if (selectedNode != null) {
        	me.getSelectionModel().select(selectedNode);
        	scorecardmainpanel.reLoadData(selectedNode); //当前选中节点
        }
    },
    onTreepanelItemClick: function(tablepanel, record, item, index, e, options) {
    	var me = this;
    	var nodeItems = me.getSelectionModel().selected.items;
        if (nodeItems.length > 0) {
            selectedNode = nodeItems[0];
            me.currentNode = selectedNode;
        }
    	var metrictreecardpanel = Ext.getCmp('metrictreecardpanel');
    	var activeItem = metrictreecardpanel.getActiveItem();
    	if(activeItem.id=='scorecardtree'){//当点击添加或编辑指标时,在点击记分卡节点时,需要设置记分卡scorecardmainpanel主面板在右侧
    		me.selectAllKpiOrSC(record);
    	}
    	
    },
    selectAllKpiOrSC:function(record){
    	var me = this;
    	if(record.data.type=='myfolder'){
			var allmetricmainpanel = Ext.getCmp('allmetricmainpanel');
			Ext.getCmp('metriccentercardpanel').setActiveItem(allmetricmainpanel);
			allmetricmainpanel.reLoadData(record);
		}else{
			var scorecardmainpanel = Ext.getCmp('scorecardmainpanel');
			Ext.getCmp('metriccentercardpanel').setActiveItem(scorecardmainpanel);
			me.disablePanel(false);
	    	scorecardmainpanel.reLoadData(record);
		}
    }

});